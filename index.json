[{"content":"","date":"26 February 2025","externalUrl":null,"permalink":"/tags/aws/","section":"Tags","summary":"","title":"Aws","type":"tags"},{"content":"","date":"26 February 2025","externalUrl":null,"permalink":"/tags/bedrock/","section":"Tags","summary":"","title":"Bedrock","type":"tags"},{"content":"","date":"26 February 2025","externalUrl":null,"permalink":"/tags/claude/","section":"Tags","summary":"","title":"Claude","type":"tags"},{"content":"","date":"26 February 2025","externalUrl":null,"permalink":"/tags/cli/","section":"Tags","summary":"","title":"Cli","type":"tags"},{"content":"","date":"26 February 2025","externalUrl":null,"permalink":"/","section":"Krzysztof's Site","summary":"","title":"Krzysztof's Site","type":"page"},{"content":"","date":"26 February 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"26 February 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" Note: This entire blog post, including the thumbnail image, was generated using Claude Code CLI.\nClaude Code is a powerful CLI tool that allows you to interact with Claude AI models directly from your terminal. This guide will walk you through setting up Claude Code to work with Amazon Bedrock as the backend provider.\nPrerequisites # AWS account with Bedrock access enabled Node.js (v14 or later) and npm installed on your system AWS CLI installed and configured with appropriate permissions Access to Anthropic Claude 3.7 in your AWS Bedrock account Setup Steps # Install Claude Code CLI\nInstall the official Claude Code CLI tool from Anthropic:\nnpm install -g @anthropic-ai/claude-code You can verify the installation was successful by running:\nclaude --version For detailed installation instructions, refer to the official Claude Code documentation.\nConfigure AWS Credentials\nEnsure your AWS credentials are properly configured with permissions for Bedrock:\naws configure You\u0026rsquo;ll need to enter:\nAWS Access Key ID AWS Secret Access Key Default region name (use a region where Claude 3.7 is available, like us-east-1) Default output format (recommended: json) For IAM permissions, your user/role needs:\nbedrock:InvokeModel bedrock:ListFoundationModels For detailed AWS credentials setup, see the AWS CLI Configuration Guide.\nEnable Claude 3.7 Model Access in Bedrock\nNavigate to the AWS Bedrock console in a supported region (e.g., us-east-1)\nComplete Bedrock onboarding if needed (accept terms and conditions)\nGo to \u0026ldquo;Model access\u0026rdquo; → \u0026ldquo;Manage model access\u0026rdquo;\nFind \u0026ldquo;Anthropic\u0026rdquo; and check \u0026ldquo;Claude 3.7 Sonnet\u0026rdquo; (anthropic.claude-3-7-sonnet-20250219-v1:0)\nClick \u0026ldquo;Request model access\u0026rdquo; and \u0026ldquo;Save changes\u0026rdquo;\nWait a few minutes for access to be granted (status will change from \u0026ldquo;Pending\u0026rdquo; to \u0026ldquo;Access granted\u0026rdquo;)\nYou can verify access using the AWS CLI:\naws bedrock list-foundation-models --region us-east-1 | grep anthropic.claude-3-7-sonnet If you encounter issues, check that your account has completed Bedrock onboarding and review service quotas in your selected region.\nSet Environment Variables\nTo tell Claude Code to use Bedrock as its backend, you need to set some environment variables. These are special settings that tell the software which model to use and where to find it.\nQuick Start (Temporary Use) # If you just want to try Claude Code with Bedrock quickly, you can run these commands in your terminal before using Claude:\n# Copy and paste these lines into your terminal export DISABLE_PROMPT_CACHING=1 export ANTHROPIC_MODEL=\u0026#39;anthropic.claude-3-7-sonnet-20250219-v1:0\u0026#39; export CLAUDE_CODE_USE_BEDROCK=1 After running these commands in your terminal window, you can immediately use Claude Code with Bedrock by running claude commands in that same terminal window. However, these settings will only last until you close that terminal window.\nFor US East Region (Virginia) # If you\u0026rsquo;re using the US East region (which is the default for many AWS accounts):\nexport AWS_REGION=\u0026#39;us-east-1\u0026#39; For Permanent Configuration # To avoid having to set these variables every time, you can make them permanent by adding them to your shell\u0026rsquo;s configuration file:\nOpen your shell configuration file in a text editor:\nFor Mac/Linux with Bash: nano ~/.bashrc or nano ~/.bash_profile For Mac with Zsh: nano ~/.zshrc For Fish shell: nano ~/.config/fish/config.fish Add these lines at the end of the file:\n# Claude Code Bedrock configuration export DISABLE_PROMPT_CACHING=1 export ANTHROPIC_MODEL=\u0026#39;anthropic.claude-3-7-sonnet-20250219-v1:0\u0026#39; export CLAUDE_CODE_USE_BEDROCK=1 export AWS_REGION=\u0026#39;us-east-1\u0026#39; # Change this if using a different region Save the file and exit the editor\nIn nano: Press Ctrl+O to save, then Enter, then Ctrl+X to exit Apply the changes by reloading your configuration:\n# For bash (choose one depending on which file you edited) source ~/.bashrc # OR source ~/.bash_profile # For zsh source ~/.zshrc # For fish source ~/.config/fish/config.fish After completing these steps, Claude Code will use Bedrock in all your terminal sessions.\nUsing Claude Code with Bedrock # Claude Code has access to the directory where it\u0026rsquo;s executed, allowing it to analyze your project files, understand your codebase, and assist with development tasks. It can guide you through complex processes by suggesting next steps and requesting permission before running commands that modify your files or system.\nThis means you can use Claude to help build entire projects, solve complex coding challenges, or fix bugs by giving it context about your codebase. Claude will analyze the relevant files and provide step-by-step assistance, asking for confirmation before taking actions that might alter your system or files.\nOnce configured, you can start using Claude Code with commands like:\n# Ask Claude a question claude \u0026#34;How do I optimize Docker images?\u0026#34; # Run Claude in interactive mode claude # Run Claude with context from a specific file claude --context path/to/file.py \u0026#34;Explain this code\u0026#34; # Use Claude to help debug an error message claude --context error_log.txt \u0026#34;How do I fix this error?\u0026#34; # Generate code based on requirements claude \u0026#34;Write a Python script that reads CSV files and outputs JSON\u0026#34; # Review and explain complex code claude --context complex_module.js \u0026#34;Explain how this module works\u0026#34; # Analyze logs or data claude --context application.log \u0026#34;Summarize these logs and identify issues\u0026#34; # Help with Git operations claude \u0026#34;How do I rebase my feature branch onto main and resolve conflicts?\u0026#34; # Multiple contexts for more comprehensive analysis claude --context file1.js --context file2.js \u0026#34;How do these two files interact?\u0026#34; # Use Claude for infrastructure as code help claude --context terraform.tf \u0026#34;Optimize this Terraform configuration\u0026#34; Benefits of Using Bedrock Backend # Data privacy - your queries stay within your AWS environment Cost management through AWS billing Access control through IAM policies Lower latency (depending on region configuration) Troubleshooting # If you encounter issues with Claude Code using Bedrock, try these troubleshooting steps:\nConnection and Authentication Issues # Verify AWS Credentials and Permissions\n# Check if your credentials are properly configured aws sts get-caller-identity # Verify you have Bedrock access aws bedrock list-foundation-models --region us-east-1 Confirm Model Access\n# Check if Claude 3.7 is available to your account aws bedrock list-foundation-models --query \u0026#34;modelSummaries[?modelId==\u0026#39;anthropic.claude-3-7-sonnet-20250219-v1:0\u0026#39;]\u0026#34; --region us-east-1 Region Configuration\nEnsure your AWS_REGION environment variable (or default region) is set to a region where Claude 3.7 is available Verify model availability in your region in the Bedrock service endpoints documentation Common Error Messages # \u0026ldquo;AccessDeniedException\u0026rdquo; - Check IAM permissions; your user/role needs bedrock:InvokeModel permission \u0026ldquo;ValidationException: Model not found\u0026rdquo; - Verify model ID and region compatibility \u0026ldquo;ResourceNotFoundException\u0026rdquo; - Ensure you\u0026rsquo;ve completed model access approval \u0026ldquo;ThrottlingException\u0026rdquo; - You may have exceeded your quota; check your Bedrock quotas Environment Debugging # Run Claude Code with debug logging enabled:\nDEBUG=* claude \u0026#34;Your prompt here\u0026#34; For persistent issues, you can check AWS CloudTrail logs to see if your Bedrock API calls are being made and any errors they\u0026rsquo;re returning:\naws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=InvokeModel For more comprehensive troubleshooting and documentation:\nClaude Code documentation AWS Bedrock documentation AWS Bedrock troubleshooting guide Meta: How This Post Was Created # This entire blog post, including the featured image, was created using Claude Code CLI in interactive mode. Here\u0026rsquo;s the process:\nThe initial content was generated through a conversation with Claude Code, initiated with the prompt \u0026ldquo;let\u0026rsquo;s add a blog entry describing how to use claude code with bedrock backend\u0026rdquo;\nAll modifications, refinements, and additions to the content were made solely through prompts to Claude Code - the author never directly edited any files\nThe featured image was created entirely through Claude Code:\nClaude suggested ImageMagick commands to generate the base image It created a gradient background, added text elements, AWS Bedrock logo, and symbolic graphics Claude handled image resizing and optimization for web display All image manipulations were performed through commands suggested by Claude and executed with user permission This workflow demonstrates the power of Claude Code as a complete content creation assistant. The author provided only directional input through conversation, while Claude handled all file creation, editing, and image processing tasks. This showcases the practical application of AI-assisted content creation using Claude Code with the AWS Bedrock backend for production-ready output.\n","date":"26 February 2025","externalUrl":null,"permalink":"/posts/using-claude-code-with-bedrock/","section":"Posts","summary":"","title":"Using Claude Code with Bedrock Backend","type":"posts"},{"content":"","date":"21 February 2025","externalUrl":null,"permalink":"/tags/about/","section":"Tags","summary":"","title":"About","type":"tags"},{"content":" Hello World, I\u0026rsquo;m Krzysztof! 👋 # Hey, my name is Krzysztof! You can call me Chris if it’s easier for you - Krzysztof is just \u0026lsquo;Christopher\u0026rsquo; written in a funky Polish way. 😉\nI\u0026rsquo;m a DevOps Engineer currently working for AWS (Amazon Web Services) Professional Services. In my day to day work, I\u0026rsquo;m assisting AWS\u0026rsquo; largest customers on their cloud journey with both my technical (coding, architecting) and consulting skills.\nIn my \u0026ldquo;past live\u0026rdquo;, I\u0026rsquo;ve been a robotics engineer. I have switched to IT after being involved in Industrial Internet of Things / Physics High Performance Computing projects in my previous work experience.\n💼 Work stuff # I\u0026rsquo;m a DevOps Consultant at AWS Professional Services Global Competency Center in Warsaw! 🇵🇱\nIn my current role - as a DevOps engineer, I’m helping AWS’ largest customers on their journey to the cloud. Usually, I’m developing Serverless backend software (mostly in Python), designing Infrastructure as Code (CF \u0026amp; SAM / TF / CDK) with a strong accent on Security (preventive and reactive controls, DevSecOps).\nMy superpower is insisting on the highest standards in software development teams. By highest standards, I mean both the way of working (DevSecOps culture) and technical excellence - building production-ready, safe and operations-friendly products.\n🕔 Private stuff # I’m passionate about music - I love to explore different aspects of it (theory, genres, folk etc) and discuss / exchange discoveries with my peers. I spend most of my free time playing my guitars \u0026amp; piano, tinkering with my 3D printers or writing some code for my pet projects.\nAs you might have already guessed, I’m a big nerd. 🤓\n📜 Certification flex (yeah I know..) # I love learning new things, here are some certifications / skill badges that I\u0026rsquo;ve earned!\n☁️ Amazon Web Services (AWS) # ⚡ Scaled Agile (SAFe) # ","date":"21 February 2025","externalUrl":null,"permalink":"/about/author/","section":"Abouts","summary":"","title":"About Me","type":"about"},{"content":"This page was made with Hugo and Blowfish.\nTODO: add a descriptn how this site is built / reference it\u0026rsquo;s source\n","date":"21 February 2025","externalUrl":null,"permalink":"/about/page/","section":"Abouts","summary":"","title":"About This Site","type":"about"},{"content":"","date":"21 February 2025","externalUrl":null,"permalink":"/about/","section":"Abouts","summary":"","title":"Abouts","type":"about"},{"content":"","date":"21 February 2025","externalUrl":null,"permalink":"/tags/author/","section":"Tags","summary":"","title":"Author","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]